// Generated by CoffeeScript 1.6.2
(function() {
  var LiteTouch, Socket, assert;

  assert = require('chai').assert;

  LiteTouch = require('../litetouch');

  Socket = require('./socket');

  describe('LiteTouch', function() {
    var litetouch, socket;

    litetouch = null;
    socket = null;
    beforeEach(function() {
      socket = new Socket();
      return litetouch = new LiteTouch(socket);
    });
    it('should set internal event notify', function(done) {
      socket.output = 'R,RSACK,SIEVN\r';
      return litetouch.internalEventNotify(7, function() {
        assert.equal(socket.input, 'R,SIEVN,7\r');
        return done();
      });
    });
    it('should set station notify', function(done) {
      socket.output = 'R,RSACK,SSTNN\r';
      return litetouch.stationNotify(12, 3, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,SSTNN,012,3\r');
        return done();
      });
    });
    it('should set module notify', function(done) {
      socket.output = 'R,RSACK,SMODN\r';
      return litetouch.moduleNotify(32, 0, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,SMODN,032,0\r');
        return done();
      });
    });
    it('should get clock', function(done) {
      socket.output = 'R,RQRES,DGCLK,20121225120155\r';
      return litetouch.getClock(function(err, date) {
        var expected;

        if (err) {
          return done(err);
        }
        expected = new Date('2012', '11', '25', '12', '01', '55', '00');
        assert.equal(expected.getTime(), date.getTime());
        return done();
      });
    });
    it('should set clock', function(done) {
      var date;

      date = new Date('2012', '11', '25', '12', '01', '55', '00');
      socket.output = 'R,RQRES,DSCLK\r';
      return litetouch.setClock(date, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,DSCLK,20121225120155\r');
        return done();
      });
    });
    it('should get sunrise', function(done) {
      socket.output = 'R,RQRES,CGTSR,Sunrise at [0725] Astro Time is [1738] Local Time is [1738]\r';
      return litetouch.getSunrise(function(err, msg) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CGTSR\r');
        assert.equal(msg.sunrise.hour, '07');
        assert.equal(msg.sunrise.minute, '25');
        assert.equal(msg.astroTime.hour, '17');
        assert.equal(msg.astroTime.minute, '38');
        assert.equal(msg.localTime.hour, '17');
        assert.equal(msg.localTime.minute, '38');
        return done();
      });
    });
    it('should get sunset', function(done) {
      socket.output = 'R,RQRES,CGTSS,Sunset at [0725] Astro Time is [1738] Local Time is [1738]\r';
      return litetouch.getSunset(function(err, msg) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CGTSS\r');
        assert.equal(msg.sunset.hour, '07');
        assert.equal(msg.sunset.minute, '25');
        assert.equal(msg.astroTime.hour, '17');
        assert.equal(msg.astroTime.minute, '38');
        assert.equal(msg.localTime.hour, '17');
        assert.equal(msg.localTime.minute, '38');
        return done();
      });
    });
    it('should get module levels', function(done) {
      socket.output = 'R,RQRES,DGMLV,0003,02,35,100,33,25,100,100,0,15\r';
      return litetouch.getModuleLevels(1, function(err, levels) {
        var expected;

        if (err) {
          return done(err);
        }
        expected = [
          {
            on: true,
            level: 2
          }, {
            on: true,
            level: 35
          }, {
            on: false,
            level: 100
          }, {
            on: false,
            level: 33
          }, {
            on: false,
            level: 25
          }, {
            on: false,
            level: 100
          }, {
            on: false,
            level: 100
          }, {
            on: false,
            level: 0
          }, {
            on: false,
            level: 15
          }
        ];
        assert.deepEqual(expected, levels);
        return done();
      });
    });
    it('should press switch', function(done) {
      socket.output = 'R,RCACK,CPRSW\r';
      return litetouch.pressSwitch(5, 3, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CPRSW,0053\r');
        return done();
      });
    });
    it('should hold switch', function(done) {
      socket.output = 'R,RCACK,CHDSW\r';
      return litetouch.holdSwitch(5, 3, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CHDSW,0053\r');
        return done();
      });
    });
    it('should release switch', function(done) {
      socket.output = 'R,RCACK,CRLSW\r';
      return litetouch.releaseSwitch(5, 3, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CRLSW,0053\r');
        return done();
      });
    });
    it('should toggle switch', function(done) {
      socket.output = 'R,RCACK,CTGSW\r';
      return litetouch.toggleSwitch(5, 3, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CTGSW,0053\r');
        return done();
      });
    });
    it('should press hold switch', function(done) {
      socket.output = 'R,RCACK,CPHSW\r';
      return litetouch.pressHoldSwitch(5, 3, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CPHSW,0053\r');
        return done();
      });
    });
    it('should toggle loads on', function(done) {
      socket.output = 'R,RCACK,CTLON\r';
      return litetouch.toggleLoadsOn(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CTLON,001\r');
        return done();
      });
    });
    it('should toggle loads off', function(done) {
      socket.output = 'R,RCACK,CTLOF\r';
      return litetouch.toggleLoadsOff(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CTLOF,001\r');
        return done();
      });
    });
    it('should start ramp', function(done) {
      socket.output = 'R,RCACK,CSTRP\r';
      return litetouch.startRamp(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CSTRP,001\r');
        return done();
      });
    });
    it('should stop ramp', function(done) {
      socket.output = 'R,RCACK,CSPRP\r';
      return litetouch.stopRamp(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CSPRP,001\r');
        return done();
      });
    });
    it('should start ramp to min', function(done) {
      socket.output = 'R,RCACK,CSRMN\r';
      return litetouch.startRampToMin(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CSRMN,001\r');
        return done();
      });
    });
    it('should start ramp to max', function(done) {
      socket.output = 'R,RCACK,CSRMX\r';
      return litetouch.startRampToMax(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CSRMX,001\r');
        return done();
      });
    });
    it('should lock loads', function(done) {
      socket.output = 'R,RCACK,CLCKL\r';
      return litetouch.lockLoads(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CLCKL,001\r');
        return done();
      });
    });
    it('should unlock loads', function(done) {
      socket.output = 'R,RCACK,CUNLL\r';
      return litetouch.unlockLoads(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CUNLL,001\r');
        return done();
      });
    });
    it('should lock switch', function(done) {
      socket.output = 'R,RCACK,CLCKS\r';
      return litetouch.lockSwitch(3, 5, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CLCKS,0035\r');
        return done();
      });
    });
    it('should unlock switch', function(done) {
      socket.output = 'R,RCACK,CUNLS\r';
      return litetouch.unlockSwitch(3, 5, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CUNLS,0035\r');
        return done();
      });
    });
    it('should lock timer', function(done) {
      socket.output = 'R,RCACK,CLCKT\r';
      return litetouch.lockTimer(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CLCKT,001\r');
        return done();
      });
    });
    it('should unlock timer', function(done) {
      socket.output = 'R,RCACK,CUNLT\r';
      return litetouch.unlockTimer(1, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.input, 'R,CUNLT,001\r');
        return done();
      });
    });
    it('should emit switch press', function(done) {
      litetouch.on('press:12,3', done);
      socket.output = 'R,REVNT,SWP,00C3\r';
      return socket.emit('readable');
    });
    it('should emit general switch press', function(done) {
      litetouch.on('press', function(station, button) {
        assert.equal(12, station);
        assert.equal(3, button);
        return done();
      });
      socket.output = 'R,REVNT,SWP,00C3\r';
      return socket.emit('readable');
    });
    it('should emit switch release', function(done) {
      litetouch.on('release:12,3', done);
      socket.output = 'R,REVNT,SWR,00C3\r';
      return socket.emit('readable');
    });
    it('should emit general switch release', function(done) {
      litetouch.on('release', function(station, button) {
        assert.equal(12, station);
        assert.equal(3, button);
        return done();
      });
      socket.output = 'R,REVNT,SWR,00C3\r';
      return socket.emit('readable');
    });
    it('should emit switch hold', function(done) {
      litetouch.on('hold:12,3', done);
      socket.output = 'R,REVNT,SWH,00C3\r';
      return socket.emit('readable');
    });
    it('should emit general switch press', function(done) {
      litetouch.on('hold', function(station, button) {
        assert.equal(12, station);
        assert.equal(3, button);
        return done();
      });
      socket.output = 'R,REVNT,SWH,00C3\r';
      return socket.emit('readable');
    });
    it('should emit led update', function(done) {
      litetouch.on('led:10', function(states) {
        var expected;

        expected = [false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false];
        assert.deepEqual(expected, states);
        return done();
      });
      socket.output = 'R,RLEDU,010,0010110000000000\r';
      return socket.emit('readable');
    });
    it('should emit module update', function(done) {
      litetouch.on('loads:32', function(levels) {
        var expected;

        expected = [90, null, 0, null, 50, 0, 30, null];
        assert.deepEqual(expected, levels);
        return done();
      });
      socket.output = 'R,RMODU,0032,FF,90,-1,0,-1,50,0,30,-1\r';
      return socket.emit('readable');
    });
    return it('should handle null on read', function() {
      socket.output = null;
      return socket.emit('readable');
    });
  });

}).call(this);
