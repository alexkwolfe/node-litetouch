// Generated by CoffeeScript 1.4.0
(function() {
  var LiteTouch, Socket, assert;

  assert = require('chai').assert;

  LiteTouch = require('../litetouch');

  Socket = require('./socket');

  describe('LiteTouch', function() {
    var litetouch, socket;
    litetouch = null;
    socket = null;
    beforeEach(function() {
      socket = new Socket();
      return litetouch = new LiteTouch(socket);
    });
    it('should set internal event notify', function(done) {
      socket.response = 'R,RSACK,SIEVN';
      return litetouch.internalEventNotify(7, function() {
        assert.equal(socket.data, 'R,SIEVN,7\r');
        return done();
      });
    });
    it('should set station notify', function(done) {
      socket.response = 'R,RSACK,SSTNN';
      return litetouch.stationNotify(12, 3, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.data, 'R,SSTNN,012,3\r');
        return done();
      });
    });
    it('should set module notify', function(done) {
      socket.response = 'R,RSACK,SMODN';
      return litetouch.moduleNotify(32, 0, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.data, 'R,SMODN,032,0\r');
        return done();
      });
    });
    it('should get clock', function(done) {
      socket.response = 'R,RQRES,DGCLK,20121225120155';
      return litetouch.getClock(function(err, date) {
        var expected;
        if (err) {
          return done(err);
        }
        expected = new Date('2012', '11', '25', '12', '01', '55', '00');
        assert.equal(expected.getTime(), date.getTime());
        return done();
      });
    });
    it('should set clock', function(done) {
      var date;
      date = new Date('2012', '11', '25', '12', '01', '55', '00');
      socket.response = 'R,RQRES,DSCLK';
      return litetouch.setClock(date, function(err) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.data, 'R,DSCLK,20121225120155\r');
        return done();
      });
    });
    it('should get sunrise', function(done) {
      socket.response = 'R,RQRES,CGTSR,Sunrise at [0725] Astro Time is [1738] Local Time is [1738]';
      return litetouch.getSunrise(function(err, msg) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.data, 'R,CGTSR\r');
        assert.equal(msg.sunrise.hour, '07');
        assert.equal(msg.sunrise.minute, '25');
        assert.equal(msg.astroTime.hour, '17');
        assert.equal(msg.astroTime.minute, '38');
        assert.equal(msg.localTime.hour, '17');
        assert.equal(msg.localTime.minute, '38');
        return done();
      });
    });
    it('should get sunset', function(done) {
      socket.response = 'R,RQRES,CGTSS,Sunset at [0725] Astro Time is [1738] Local Time is [1738]';
      return litetouch.getSunset(function(err, msg) {
        if (err) {
          return done(err);
        }
        assert.equal(socket.data, 'R,CGTSS\r');
        assert.equal(msg.sunset.hour, '07');
        assert.equal(msg.sunset.minute, '25');
        assert.equal(msg.astroTime.hour, '17');
        assert.equal(msg.astroTime.minute, '38');
        assert.equal(msg.localTime.hour, '17');
        assert.equal(msg.localTime.minute, '38');
        return done();
      });
    });
    it('should get module levels', function(done) {
      socket.response = 'R,RQRES,DGMLV,0003,02,35,100,33,25,100,100,0,15';
      return litetouch.getModuleLevels(1, function(err, levels) {
        var expected;
        if (err) {
          return done(err);
        }
        expected = [
          {
            on: true,
            level: 2
          }, {
            on: true,
            level: 35
          }, {
            on: false,
            level: 100
          }, {
            on: false,
            level: 33
          }, {
            on: false,
            level: 25
          }, {
            on: false,
            level: 100
          }, {
            on: false,
            level: 100
          }, {
            on: false,
            level: 0
          }, {
            on: false,
            level: 15
          }
        ];
        assert.deepEqual(expected, levels);
        return done();
      });
    });
    return it('should emit switch press', function(done) {
      litetouch.on('press:5,3', function() {
        return done();
      });
      return socket.emit('data', 'R,REVNT,SWP,0053\r');
    });
  });

}).call(this);
